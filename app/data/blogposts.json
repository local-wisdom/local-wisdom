{"florent":{"index":{"title":"Oliver Post","date":"2015-11-28","lat":53.117114,"lng":51.117114,"author":"Oliver Twist","header":"http://i.imgur.com/oQFDtQC.jpg","shop":"Oliver Twist's Bikes","avatar":"http://i.imgur.com/dQtOxuT.png","tags":"food","body":"<h3 id=\"what-is-your-favorite-dish-to-eat-and-or-cook-what-tips-do-you-have-when-you-are-cooking-it-\">What is your favorite dish to eat and/or cook? What tips do you have when you are cooking it?</h3>\n<p>I know people tend to have one, but I don’t really have a true favorite dish. For me, eating is something that must be done with passion no matter what dish you have. I do think it’s important though for people to eat more vegetables, so as the head of the team it is great fun to think about new ways to prepare them. We really enjoy leaving our guests an experience with that ‘wow’ effect through a healthy balanced meal.</p>\n<h3 id=\"what-is-your-favorite-dish-at-florent-and-why-what-would-you-recommend-and-why-\">What is your favorite dish at florent and why? What would you recommend and why?</h3>\n<p>On the subject of vegetables, an example of this is a simple cabbage – roasted in the oven after being covered in a beurre noisette.  It really gives the dish a nutty flavour and lets you experience the simplicity of something like cabbage in a whole new way. The cabbage dish I mentioned above is a Florent favourite as an evergreen side dish. This is a great example of the concept of the restaurant.  The dish is really quite simple, coarse even and a very basic vegetable at its heart.  For me, it’s important to not have so many miscellaneous and potentially contradictory flavours with our dishes.  Think about your own palate and what would tempt your tastebuds clearly and simply.</p>\n<h3 id=\"what-kind-of-ingredients-do-you-work-with-\">What kind of ingredients do you work with?</h3>\n<p>“We prepare our dishes using seasonally available products, trying to use as much as we can from within Europe.  Depending on the season, the weather and market availability it can affect our French-Belgian offering, so we need to strike the right balance so our guests can experience the simplicity of the dishes, still keeping the intensity of flavours.\nDo you have a favorite restaurant anywhere in the world?\nParis is one of my all-time favourite cities.  I love that in a little more than three hours by train, you can experience amazing produce, incredible food markets and some of the most famous restaurants in the world.  I love to experience the gastronomy and service.  Having said that, Noma in Copenhagen is very high on my wishlist to one day experience</p>\n"}},"oliver-post":{"index":{"title":"Oliver Post","date":"2015-11-28","lat":52.117114,"lng":54.117114,"author":"Oliver Twist","header":"http://i.imgur.com/oQFDtQC.jpg","shop":"Oliver Twist's Bikes","avatar":"http://i.imgur.com/dQtOxuT.png","tags":"food","body":"<p><img src=\"http://i.imgur.com/o13DScl.jpg\" alt=\"image\"></p>\n<h3 id=\"what-is-your-favorite-dish-to-eat-and-or-cook-what-tips-do-you-have-when-you-are-cooking-it-\">What is your favorite dish to eat and/or cook? What tips do you have when you are cooking it?</h3>\n<p>I know people tend to have one, but I don’t really have a true favorite dish. For me, eating is something that must be done with passion no matter what dish you have. I do think it’s important though for people to eat more vegetables, so as the head of the team it is great fun to think about new ways to prepare them. We really enjoy leaving our guests an experience with that ‘wow’ effect through a healthy balanced meal.</p>\n<h3 id=\"what-is-your-favorite-dish-at-florent-and-why-what-would-you-recommend-and-why-\">What is your favorite dish at florent and why? What would you recommend and why?</h3>\n<p>On the subject of vegetables, an example of this is a simple cabbage – roasted in the oven after being covered in a beurre noisette.  It really gives the dish a nutty flavour and lets you experience the simplicity of something like cabbage in a whole new way. The cabbage dish I mentioned above is a Florent favourite as an evergreen side dish. This is a great example of the concept of the restaurant.  The dish is really quite simple, coarse even and a very basic vegetable at its heart.  For me, it’s important to not have so many miscellaneous and potentially contradictory flavours with our dishes.  Think about your own palate and what would tempt your tastebuds clearly and simply.</p>\n<h3 id=\"what-kind-of-ingredients-do-you-work-with-\">What kind of ingredients do you work with?</h3>\n<p>“We prepare our dishes using seasonally available products, trying to use as much as we can from within Europe.  Depending on the season, the weather and market availability it can affect our French-Belgian offering, so we need to strike the right balance so our guests can experience the simplicity of the dishes, still keeping the intensity of flavours.\nDo you have a favorite restaurant anywhere in the world?\nParis is one of my all-time favourite cities.  I love that in a little more than three hours by train, you can experience amazing produce, incredible food markets and some of the most famous restaurants in the world.  I love to experience the gastronomy and service.  Having said that, Noma in Copenhagen is very high on my wishlist to one day experience</p>\n"}},"vectorious":{"index":{"title":"Vectorious","date":"2015-11-24","lat":51.117114,"lng":56.117114,"author":"Ramon Gebben","header":"http://i.imgur.com/Ex08W0g.jpg","shop":"Daily Javascript","avatar":"http://i.imgur.com/UBLi3O3.jpg","template":"article.jade","tags":"food event","body":"<p>Vectorious (GitHub: <a href=\"https://github.com/mateogianolio/vectorious\">mateogianolio/vectorious</a>, License: MIT, npm: vectorious)</p>\n<p>Vectorious is a high performance linear algebra library written in Javascript.\nIt is available via npm or just as a script so you can include it on your page.</p>\n<p>Since I&#39;m not a mathematician and did not do a lot of linear algebra, you will have to bare with me.\nI will try to give you a good description of what this library can do.</p>\n<p>It has two mayor API endpoints to work with: <code>Matrix</code> and <code>Vector</code>.\nThe constructor functions for both these functions can be called with a range of different arguments.\nSince 2.1.0 Vector implements <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\">JavaScript typed arrays</a> for increased performance. The default Vector type is Float64Array, but this can be specified upon creation.</p>\n<p>We would work with it like so:</p>\n<pre><code class=\"lang-javascript\">import { Vector, Matrix } from &#39;vectorious&#39;;\n\nlet vector, matrix;\n\n// Create an empty vector of default type Float64Array\nvector = new Vector();\n/* Vector { type: [Function: Float64Array], length: 0 } */\n\n// Create an empty vector of type Uint8Array\nvector = new Vector(Uint8Array);\n/* Vector { type: [Function: Uint8Array], length: 0 } */\n\nmatrix = new Matrix();\n/* Matrix { type: [Function: Float64Array], shape: [] } */\n\nvector = Vector.zeros(5);\n/* Vector {\n  type: [Function: Float64Array],\n  length: 5,\n  buffer: ArrayBuffer {},\n  values: Float64Array { &#39;0&#39;: 0, &#39;1&#39;: 0, &#39;2&#39;: 0, &#39;3&#39;: 0, &#39;4&#39;: 0 } } */\n\nvector = new Vector(1, 2, 3, 4, 5);\n/* Vector {\n  type: [Function: Float64Array],\n  length: 5,\n  buffer: ArrayBuffer {},\n  values: Float64Array { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, &#39;3&#39;: 4, &#39;4&#39;: 5 } } */\n\nmatrix = new Matrix(vector);\n/* Matrix {\n  type: [Function: Float64Array],\n  shape: [ 5, 1 ],\n  data: Float64Array { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, &#39;3&#39;: 4, &#39;4&#39;: 5 } } */\n\nmatrix = Matrix.zeros(2, 2);\n/* Matrix {\n  shape: [ 2, 2 ],\n  data: Float64Array { &#39;0&#39;: 0, &#39;1&#39;: 0, &#39;2&#39;: 0, &#39;3&#39;: 0 },\n  type: [Function: Float64Array] } */\n</code></pre>\n<p>The developer posted an example of how you would map a time range over a sinus.</p>\n<pre><code class=\"lang-javascript\">var time = Vector.range(0, Math.PI / 12, Math.PI);\n// Which will return\n/* Vector {\n  type: [Function: Float64Array],\n  length: 12,\n  buffer: ArrayBuffer {},\n  values:\n   Float64Array {\n     &#39;0&#39;: 0,\n     &#39;1&#39;: 0.2617993877991494,\n     &#39;2&#39;: 0.5235987755982988,\n     &#39;3&#39;: 0.7853981633974483,\n     &#39;4&#39;: 1.0471975511965976,\n     &#39;5&#39;: 1.308996938995747,\n     &#39;6&#39;: 1.5707963267948963,\n     &#39;7&#39;: 1.8325957145940457,\n     &#39;8&#39;: 2.0943951023931953,\n     &#39;9&#39;: 2.356194490192345,\n     &#39;10&#39;: 2.6179938779914944,\n     &#39;11&#39;: 2.879793265790644 } } */\n\nvar sine = time.map(Math.sin);\n// Which will return\n/* Vector {\n  type: [Function: Float64Array],\n  length: 12,\n  buffer: ArrayBuffer {},\n  values:\n   Float64Array {\n     &#39;0&#39;: 0,\n     &#39;1&#39;: 0.25881904510252074,\n     &#39;2&#39;: 0.49999999999999994,\n     &#39;3&#39;: 0.7071067811865475,\n     &#39;4&#39;: 0.8660254037844386,\n     &#39;5&#39;: 0.9659258262890682,\n     &#39;6&#39;: 1,\n     &#39;7&#39;: 0.9659258262890684,\n     &#39;8&#39;: 0.8660254037844387,\n     &#39;9&#39;: 0.7071067811865476,\n     &#39;10&#39;: 0.49999999999999994,\n     &#39;11&#39;: 0.2588190451025206 } } */\n</code></pre>\n<p>Besides the very extensive API it also accommodates extentions such as <a href=\"https://github.com/mateogianolio/vectorious-solve\">Solve</a> and <a href=\"https://github.com/mateogianolio/vectorious-plot\">Plot</a>.\nPlot for instance can be used to a two-dimensional SVG plot from two input vectors.</p>\n"}},"velocity-react":{"index":{"title":"Velocity React","date":"2015-10-05","lat":54.117114,"lng":54.117114,"author":"Ramon Gebben","header":"http://i.imgur.com/Ex08W0g.jpg","shop":"Daily Javascript","avatar":"http://i.imgur.com/UBLi3O3.jpg","template":"article.jade","tags":"drink","body":"<p>velocity-react (GitHub: <a href=\"https://github.com/twitter-fabric/velocity-react\">twitter-fabric/velocity-react</a>, License: MIT, npm: velocity-react)</p>\n<p>Today I had some trouble finding something to write about. Then I remembered the awesome work done by the guys at Twitter Fabric. They made a React component for interacting with amazing <a href=\"http://julian.com/research/velocity/\">Velocity</a> animation library.\nOffical introduction can be found <a href=\"https://fabric.io/blog/introducing-the-velocityreact-library\">here.</a></p>\n<p>If you are not familiar with <a href=\"http://julian.com/research/velocity/\">Velocity</a> I suggest you take a look at this first.</p>\n<p>The package contains two components; <code>&lt;VelocityComponent /&gt;</code> and <code>&lt;VelocityTransitionGroup /&gt;</code></p>\n<p>Velocity React integration follow this simple algorithm:</p>\n<ul>\n<li>Initially, an animated component will appear as it would at the end of its given animation.</li>\n<li>If that given animation ever changes, it runs it to get to the new end state. If there’s an animation currently in progress, we stop it first, and then proceed smoothly from whatever intermediate state it left us in.</li>\n</ul>\n<p>Here is a small example that was given in the introduction from Fabric.</p>\n<pre><code class=\"lang-javascript\">render: function () {\n  var animationProps;\n  if (this.state.hovering) {\n    animationProps = {\n      duration: 200,\n      animation: {\n        rotateX: 160\n      }\n    };\n  } else {\n    animationProps = {\n      duration: 1100, // longer due to swinging\n      animation: {\n        rotateX: [0, &#39;spring&#39;]\n      }\n    };\n  }\n\n  return (\n    &lt;div onMouseEnter={function () { this.setState({hovering: true}); }}\n         onMouseLeave={function () { this.setState({hovering: false}); }}&gt;\n      &lt;VelocityComponent {...animationProps}&gt;\n        {this.renderTopState()}\n      &lt;/VelocityComponent&gt;\n      {this.renderUnderneathStats()}\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<p>Which will result in:\n<img src=\"https://static1.squarespace.com/static/54ac6f9ae4b0cf1d82a4b59e/t/560a9a19e4b08fcd39795d27/1443535397904/release_summary.gif?format=300w\" tyle=\"max-width: 320px; width: 100%; position:static;\"></p>\n<p>As the name implies <code>&lt;VelocityTransitionGroup /&gt;</code> can be used to animate a group of element at the same time. In the example on the Fabric blog we can use it being used to animate an input slider, but that&#39;s not all. When you pay close attention you will the the toggle switch animating and a &quot;jawbone&quot; collapse. Al these animation are done at once.</p>\n<p><img src=\"https://static1.squarespace.com/static/54ac6f9ae4b0cf1d82a4b59e/t/560a9a69e4b0a427e3b70022/1443535503361/?format=750w\" tyle=\"max-width: 320px; width: 100%; position:static;\"></p>\n<p>I was very impressed with the work and I&#39;m trying to push this as the new standard for animating React components at the company where I work. And will be the default for all my pet projects.</p>\n"}},"vorpal":{"index":{"title":"Vorpal.js","date":"2015-10-19","lat":52.117114,"lng":53.117114,"author":"Ramon Gebben","header":"http://i.imgur.com/Ex08W0g.jpg","shop":"Daily Javascript","avatar":"http://i.imgur.com/UBLi3O3.jpg","template":"article.jade","tags":"drink","body":"<p>Vorpal (GitHub: <a href=\"https://github.com/dthree/vorpal\">dthree/vorpal</a>, License: MIT, npm: vorpal)</p>\n<p>Vorpal is a framework for building interactive CLI applications. Inspired and based on <a href=\"https://www.npmjs.com/package/commander\">commander.js</a> which is a port from the wonderful work done on this <a href=\"https://github.com/commander-rb/commander\">Ruby Gem</a>.\nIt provides you with an interactive prompt provided by <a href=\"https://www.npmjs.com/package/inquirer\">inquirer</a> and also provides a very extensive API with features such as: piped commands, command history, built-in help menu, tab autocompletion and the list goes on.</p>\n<p>For full documentation of the API you should take a look at the <a href=\"https://github.com/dthree/vorpal/wiki\">Wiki</a>.</p>\n<p>Getting started with Vorpal.</p>\n<pre><code class=\"lang-javascript\">import vorpal from &#39;vorpal&#39;\n\nconst program = vorpal();\n\nprogram\n  .command(&#39;foo&#39;, &#39;Outputs &quot;bar&quot;&#39;)\n  .action((args, callback) =&gt; {\n    this.log(&#39;bar&#39;);\n    callback();\n  });\n\nprogram\n  .delimiter(&#39;app $&#39;)\n  .show();\n</code></pre>\n<p>This creates an instance of Vorpal, adds a command which logs &quot;bar&quot;, sets the prompt delimiter to say &quot;app $&quot;, and shows the prompt.</p>\n"}},"vstack-validator":{"index":{"title":"vstack-validator","date":"2015-10-28","lat":52.1148955,"lng":51.117114,"author":"Ramon Gebben","header":"http://i.imgur.com/Ex08W0g.jpg","shop":"Daily Javascript","avatar":"http://i.imgur.com/UBLi3O3.jpg","tags":"design events","body":"<p>Vstack-validator (GitHub: <a href=\"https://github.com/vslinko/vstack-validator\">vslinko/vstack-validator</a>, License: MIT, npm: vstack-validator)</p>\n<p>When you are working with very complex and deeply nested data structures, validation can become a real pain.\nVstack-validator tries to solve this problem by providing you with a declarative API which consists of 3 methods: a validator, a constraint and a schema.\nThe Validator is a function that receives a value and returns boolean result of validation.\nConstraint is a function that receives a value and returns validation metadata.\nWith a Schema we create declarations of the constraints in a tree, which in turn can be used to validate an object, which would look like this:</p>\n<pre><code class=\"lang-javascript\">import {schema} from &#39;vstack-validator&#39;;\n\nconst userSchema = schema.type(&#39;user&#39;, {\n    email: {\n        notEmpty: schema.constraint(schema.validators.isNotEmpty, &#39;Email is empty&#39;),\n        email: schema.constraint(schema.validators.isEmail, &#39;Email is not valid&#39;),\n    },\n    password: schema.optional({\n        notEmpty: schema.constraint(schema.validators.isNotEmpty, &#39;Password is empty&#39;),\n        minLength: schema.minLength(3, &#39;Password is less than 3&#39;),\n    }),\n});\n\nconst itemSchema = schema.type(&#39;item&#39;, {\n    name: {\n        notEmpty: schema.constraint(schema.validators.isNotEmpty, &#39;Name is empty&#39;),\n    },\n});\n\nconst cartSchema = schema.type(&#39;cart&#39;, {\n    user: userSchema,\n    items: schema.list(itemSchema),\n});\n\nlet validationData = {\n    user: {\n        email: &#39;&#39;,\n        password: &#39;&#39;,\n    },\n    items: [\n        { name: &#39;&#39; },\n    ],\n};\n\ncartSchema.check(validationData)\n          .then((constraintResult) =&gt; console.log(constraintResult));\n</code></pre>\n<p>When the <code>check</code> is executed <code>constraintResult</code> it would look something like this:</p>\n<pre><code class=\"lang-javascript\">{\n    valid: false,\n    message: &#39;Objectisnotvalid&#39;,\n    children: {\n        user: {\n            valid: false,\n            message: &#39;Objectisnotvalid&#39;,\n            children: {\n                email: {\n                    valid: false,\n                    message: &#39;Valueisnotvalid&#39;,\n                    children: {\n                        notEmpty: {\n                            valid: false,\n                            message: &#39;Emailisempty&#39;,\n                            children: null\n                        },\n                        email: {\n                            valid: false,\n                            message: &#39;Emailisnotvalid&#39;,\n                            children: null\n                        }\n                    }\n                },\n                password: {\n                    valid: false,\n                    message: &#39;Valueisnotvalid&#39;,\n                    children: {\n                        notEmpty: {\n                            valid: false,\n                            message: &#39;Passwordisempty&#39;,\n                            children: null\n                        },\n                        minLength: {\n                            valid: false,\n                            message: &#39;Passwordislessthan3&#39;,\n                            children: null\n                        }\n                    }\n                }\n            }\n        },\n        items: {\n            valid: false,\n            message: &#39;Arrayisnotvalid&#39;,\n            children: [\n                {\n                    valid: false,\n                    message: &#39;Objectisnotvalid&#39;,\n                    children: {\n                        name: {\n                            valid: false,\n                            message: &#39;Valueisnotvalid&#39;,\n                            children: {\n                                notEmpty: {\n                                    valid: false,\n                                    message: &#39;Nameisempty&#39;,\n                                    children: null\n                                }\n                            }\n                        }\n                    }\n                }\n            ]\n        }\n    }\n}\n</code></pre>\n"}},"vuejs":{"index":{"title":"Vue.js","date":"2015-11-25","lat":52.1170037,"lng":56.117114,"author":"Ramon Gebben","header":"http://i.imgur.com/Ex08W0g.jpg","shop":"Daily Javascript","avatar":"http://i.imgur.com/UBLi3O3.jpg","tags":"fasion design","body":"<p>Vue.js (GitHub: <a href=\"https://github.com/vuejs/vue\">vuejs/vue</a>, License: MIT, npm: vue</p>\n<p>Vue.js is a library for building web interfaces. Because it works together with some other tools, you can also call it a “framework”. Now, if you’ve never heard of or used Vue before, you are probably thinking: great, yet another JavaScript framework! I get it. That was my first thought as well, that is why I never looked at it with a serious eye. Vue isn’t particularly new, it has being in the making for almost two years now, and the first public release was in February 2014. Over time it has evolving into a great engine to build beautiful production ready app with.</p>\n<p>What makes it so awesome? Well, it supports all the features we are used to from libraries such as React, Ember and Angular but it&#39;s size and api are a lot simpler.\nA thing I love in libraries, simplicity.</p>\n<p>So let&#39;s take a look at a few small examples and let&#39;s start with data binding.</p>\n<p>This is how we define the <code>template</code> which we are gonna use:</p>\n<pre><code class=\"lang-html\">&lt;div id=&quot;binding&quot;&gt;\n    &lt;p&gt;{{message}}&lt;/p&gt;\n    &lt;input v-model=&quot;message&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n<p>And here we give it some data:</p>\n<pre><code class=\"lang-javascript\">\nlet binding = new Vue({\n  el: &#39;#binding&#39;,\n  data: {\n    message: &#39;Daily Javascript&#39;\n  }\n});\n</code></pre>\n<p>This would give is a <code>div</code> with an <code>input</code> field and a preview of the value it holds. When you start typing, Vue will take over from there.\nThat&#39;s cool right? Ok I get it data binding does not impress you anymore. Do you like working with components?\nVue takes an approach that is very similar to React: it’s components all the way down.</p>\n<pre><code class=\"lang-javascript\">const Example = Vue.extend({\n    template: &#39;&lt;div&gt;{{ message }}&lt;/div&gt;&#39;,\n    data () {\n        return {\n            message: &#39;Daily Javascript!&#39;\n        }\n    }\n});\n\n// register it with the tag &lt;example&gt;\nVue.component(&#39;example&#39;, Example);\n</code></pre>\n<p>Now we can use it like this:</p>\n<pre><code class=\"lang-html\">&lt;example&gt;&lt;/example&gt;\n</code></pre>\n<p>Because modularity is key nowadays it comes with the opportunity to <code>scope</code> styles to a component.\nThat would look something like this:</p>\n<pre><code class=\"lang-html\">&lt;style scoped &gt;\n.message {\n  color: red;\n}\n&lt;/style&gt;\n</code></pre>\n<p>Here is a full example component of how it would look when you would have it setup with a combination of <a href=\"https://github.com/webpack/webpack\">Webpack</a> and <a href=\"https://github.com/vuejs/vue-loader\">vue-loader</a>.</p>\n<p><img src=\"http://blog.evanyou.me/images/vue-hot.gif\" alt=\"demo\"></p>\n<p>It comes with a lot of more features that I will not go into such as routing and a build-in transition system.</p>\n<p>There is a demo for the transition system which demonstrates state-based tweening with Vue:</p>\n<p><p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"XmZNOG\" data-default-tab=\"result\" data-user=\"yyx990803\" class='codepen'>See the Pen <a href='http://codepen.io/yyx990803/pen/XmZNOG/'>Vue.js elastic header component</a> by Evan You (<a href='http://codepen.io/yyx990803'>@yyx990803</a>) on <a href='http://codepen.io'>CodePen</a>.</p></p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n"}}}